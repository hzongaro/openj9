/*******************************************************************************
 * Copyright (c) 2017, 2018 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

 def get_shas(OPENJDK_REPO, OPENJDK_BRANCH, OPENJ9_REPO, OPENJ9_BRANCH, OMR_REPO, OMR_BRANCH) {
    // Get a set of SHAs for a standard OpenJ9 build
    def SHAS = [:]

    // check if the SHAs are set as build parameters
    // if not set, sniff the remote repositories references

    stage ('Sniff Repos') {
        dir('openjdk') {
            SHAS['OPENJDK'] = OPENJDK_SHA
            if (SHAS['OPENJDK'] == '') {
                SHAS['OPENJDK'] = get_repository_sha(OPENJDK_REPO, OPENJDK_BRANCH)
            }
        }
        dir('openj9') {
            SHAS['OPENJ9'] = OPENJ9_SHA
            if ((SHAS['OPENJ9'] == '') && ((OPENJ9_REPO != '') && (OPENJ9_BRANCH != ''))) {
                SHAS['OPENJ9'] = get_repository_sha(OPENJ9_REPO, OPENJ9_BRANCH)
            }
        }
        dir('omr') {
            SHAS['OMR'] = OMR_SHA
            if ((SHAS['OMR'] == '') && ((OMR_REPO != '') && (OMR_BRANCH != ''))){
                SHAS['OMR'] = get_repository_sha(OMR_REPO, OMR_BRANCH)
            }
        }
        // Write the SHAs to the Build Description
        echo "OPENJDK_SHA:${SHAS['OPENJDK']}"
        echo "OPENJ9_SHA:${SHAS['OPENJ9']}"
        echo "OMR_SHA:${SHAS['OMR']}"
        currentBuild.description = "OpenJ9: ${SHAS['OPENJ9']}<br/>OMR: ${SHAS['OMR']}<br/>OpenJDK: ${SHAS['OPENJDK']}"
        return SHAS
    }
}

def get_repository_sha(REPO, BRANCH) {
   // use ssh-agent to avoid permission denied on private repositories
    if (USER_CREDENTIALS_ID != '') {
        return sshagent(credentials:["${USER_CREDENTIALS_ID}"]) {
            get_sha(REPO, BRANCH)
        }
    }

    return get_sha(REPO, BRANCH)
}

def get_sha(REPO, BRANCH) {
    // Get the SHA at the tip of the BRANCH in REPO.
    // Allows Pipelines to kick off multiple builds and have the same SHA built everywhere.
    return sh (
            // "git ls-remote $REPO" will return all refs, adding "$BRANCH" will only return the specific branch we are interested in
            // return the full 40 characters sha instead of the short version 
            // to avoid errors due to short sha ambiguousness due to multiple matches for a short sha
            script: "git ls-remote $REPO refs/heads/$BRANCH | cut -c1-40",
            returnStdout: true
        ).trim()
}

def git_push_auth(REPO, OPTION, CRED_ID) {
    withCredentials([usernamePassword(credentialsId: "${CRED_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        sh "git push https://${USERNAME}:${PASSWORD}@${REPO} ${OPTION}"
    }
}

def get_date() {
    //Returns a string for the current date YYYYMMDD_HHMMSS
    return sh (
        script: 'date +%Y%m%d_%H%M%S',
        returnStdout: true
    ).trim()
}

def build(BUILD_JOB_NAME, OPENJDK_REPO, OPENJDK_BRANCH, OPENJDK_SHA, OPENJ9_REPO, OPENJ9_BRANCH, OPENJ9_SHA, OMR_REPO, OMR_BRANCH, OMR_SHA, VARIABLE_FILE, VENDOR_REPO, VENDOR_BRANCH, VENDOR_CREDENTIALS_ID, NODE) {
    stage ("${BUILD_JOB_NAME}") {
        return build_with_slack(BUILD_JOB_NAME,
            [string(name: 'OPENJDK_REPO', value: OPENJDK_REPO),
            string(name: 'OPENJDK_BRANCH', value: OPENJDK_BRANCH),
            string(name: 'OPENJDK_SHA', value: OPENJDK_SHA),
            string(name: 'OPENJ9_REPO', value: OPENJ9_REPO),
            string(name: 'OPENJ9_BRANCH', value: OPENJ9_BRANCH),
            string(name: 'OPENJ9_SHA', value: OPENJ9_SHA),
            string(name: 'OMR_REPO', value: OMR_REPO),
            string(name: 'OMR_BRANCH', value: OMR_BRANCH),
            string(name: 'OMR_SHA', value: OMR_SHA),
            string(name: 'VARIABLE_FILE', value: VARIABLE_FILE),
            string(name: 'VENDOR_REPO', value: VENDOR_REPO),
            string(name: 'VENDOR_BRANCH', value: VENDOR_BRANCH),
            string(name: 'VENDOR_CREDENTIALS_ID', value: VENDOR_CREDENTIALS_ID),
            string(name: 'NODE', value: NODE)])
    }
}

def build_with_one_upstream(JOB_NAME, UPSTREAM_JOB_NAME, UPSTREAM_JOB_NUMBER, VARIABLE_FILE, VENDOR_REPO, VENDOR_BRANCH, VENDOR_CREDENTIALS_ID, NODE, OPENJ9_SHA) {
    stage ("${JOB_NAME}") {
        return build_with_slack(JOB_NAME,
            [string(name: 'UPSTREAM_JOB_NAME', value: UPSTREAM_JOB_NAME),
            string(name: 'UPSTREAM_JOB_NUMBER', value: "${UPSTREAM_JOB_NUMBER}"),
            string(name: 'VARIABLE_FILE', value: VARIABLE_FILE),
            string(name: 'VENDOR_REPO', value: VENDOR_REPO),
            string(name: 'VENDOR_BRANCH', value: VENDOR_BRANCH),
            string(name: 'VENDOR_CREDENTIALS_ID', value: VENDOR_CREDENTIALS_ID),
            string(name: 'NODE', value: NODE),
            string(name: 'OPENJ9_SHA', value: OPENJ9_SHA)])
    }
}

def build_with_slack(JOB_NAME, PARAMETERS) {
    def DOWNSTREAM_JOB_NUMBER = ''
    def DOWNSTREAM_JOB_URL = ''
    def JOB = build job: JOB_NAME, parameters: PARAMETERS, propagate: false

    if (JOB.resultIsWorseOrEqualTo('UNSTABLE')) {
        try {
            DOWNSTREAM_JOB_NUMBER = JOB.getNumber()
        } catch (er) {
            echo "Couldn't retrieve downstream failed job number"
        }
        try {
            DOWNSTREAM_JOB_URL = JOB.getAbsoluteUrl()
        } catch (err) {
            echo "Couldn't retrieve downstream failed job url"
        }
        
        if (JOB.result == "FAILURE"){
        	if (SLACK_CHANNEL) {
        		slackSend channel: SLACK_CHANNEL, color: 'danger', message: "Failure in: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\nDownstream Job: ${JOB_NAME} #${DOWNSTREAM_JOB_NUMBER} (<${DOWNSTREAM_JOB_URL}|Open>)"
        	}
        	error "Downstream job ${JOB_NAME} did not pass. Job Number: ${DOWNSTREAM_JOB_NUMBER} Job URL: ${DOWNSTREAM_JOB_URL}"
        } else if (JOB.result == "UNSTABLE") {
        	echo "WARNING: Downstream job ${JOB_NAME} is unstable. Job Number: ${DOWNSTREAM_JOB_NUMBER} Job URL: ${DOWNSTREAM_JOB_URL}"
        	currentBuild.result = "UNSTABLE"
        	if (SLACK_CHANNEL) {
        		slackSend channel: SLACK_CHANNEL, color: 'warning', message: "Unstable: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\nDownstream Job: ${JOB_NAME} #${DOWNSTREAM_JOB_NUMBER} (<${DOWNSTREAM_JOB_URL}|Open>)"
        	}
        }
    } 
    return JOB
}

def workflow(SDK_VERSION, SPEC, SHAS, OPENJDK_REPO, OPENJDK_BRANCH, OPENJ9_REPO, OPENJ9_BRANCH, OMR_REPO, OMR_BRANCH, TESTS_TARGETS) {
    def jobs = [:]

    // compile the source and build the SDK
    def BUILD_JOB_NAME = "Build-JDK${SDK_VERSION}-${SPEC}"
    jobs["build"] = build(BUILD_JOB_NAME, OPENJDK_REPO, OPENJDK_BRANCH, SHAS['OPENJDK'], OPENJ9_REPO, OPENJ9_BRANCH, SHAS['OPENJ9'], OMR_REPO, OMR_BRANCH, SHAS['OMR'], params.VARIABLE_FILE, params.VENDOR_REPO, params.VENDOR_BRANCH, params.VENDOR_CREDENTIALS_ID, params.BUILD_NODE)
    echo "JOB: ${BUILD_JOB_NAME} PASSED in: ${jobs['build'].getDurationString()}"

    if (TESTS_TARGETS.trim() != "none") {
        def testjobs = [:]
        def TARGET_NAMES = [:]

        def targets = TESTS_TARGETS.split(",")
        targets.each { target ->
            switch (target.trim().toLowerCase()) {
                // Due to the following reason, OpenJ9 test pipelines are still used temporarily: 
                //  - waiting for wins machine configuration to be finalized (https://github.com/AdoptOpenJDK/openjdk-tests/issues/407)
                //  - there is no need to enable JDK9 as it is not supported anymore (https://github.com/eclipse/openj9/issues/2020)
                //  - OpenJ9 test pipelines will be completely removed once we switch to use AdoptOpenJDK test pipelines
                case "_sanity":
                    if (SPEC.contains("win") || SDK_VERSION == "9") {
                        TARGET_NAMES = ["Sanity"]
                    } else {
                        TARGET_NAMES = ["sanity.functional", "sanity.system"]
                    }
                    break
                case "_extended":
                    if (SPEC.contains("win") || SDK_VERSION == "9") {
                        TARGET_NAMES = ["Extended"]
                    } else {
                        TARGET_NAMES = ["extended.functional"]
                    }
                    break
                // temporary for OMR acceptance. This should be removed once we completely switch to AdoptOpenJDK test Jenkins file
                case "_sanity.tmp":
                    TARGET_NAMES = ["Sanity"]
                    break
                default:
                    TARGET_NAMES = ["${target}"]
            }

            for ( name in TARGET_NAMES ) {
                def TEST_JOB_NAME = "Test-${name}-JDK${SDK_VERSION}-${SPEC}"
                testjobs["${TEST_JOB_NAME}"] = {
                    // run tests against the SDK build in the upstream job: Build-JDK${SDK_VERSION}-${SPEC}
                    jobs["${TEST_JOB_NAME}"] = build_with_one_upstream(TEST_JOB_NAME, BUILD_JOB_NAME, jobs["build"].getNumber(), params.VARIABLE_FILE, params.VENDOR_REPO, params.VENDOR_BRANCH, params.VENDOR_CREDENTIALS_ID, params.TEST_NODE, SHAS['OPENJ9'])
                    echo "JOB: ${TEST_JOB_NAME} PASSED in: ${jobs[TEST_JOB_NAME].getDurationString()}"
                }
            }
        }
        parallel testjobs
    }

    // return jobs for further reference
    return jobs
}
return this
